{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Web Docs","text":"<p>This is the documentation for the course Web Programming.</p>"},{"location":"#labs","title":"Labs","text":"<ul> <li>Lab-1<ul> <li>Task-1</li> <li>Task-2</li> <li>Task-3</li> <li>Task-4</li> <li>Task-5</li> </ul> </li> <li>Lab-2</li> <li>Lab-3</li> </ul>"},{"location":"lab-1/task-1/","title":"Task 1","text":""},{"location":"lab-1/task-1/#_1","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb, \u0438 \u043e\u043d\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0412 \u043e\u0442\u0432\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430.</p> <p>\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f:</p> <ul> <li>\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 <code>socket</code>.</li> <li>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP.</li> </ul> <p>\u041f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u0441\u0441\u044b\u043b\u043a\u0438:</p> <ul> <li>Habr: \u041e\u0441\u043d\u043e\u0432\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0441\u043e\u043a\u0435\u0442\u0430\u043c\u0438</li> <li>\u0410\u043d\u0434\u0440\u0435\u0439 \u041c\u0430\u043b\u0438\u043d\u0438\u043d: \u0421\u043e\u043a\u0435\u0442\u044b \u0432 Python</li> <li>\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f Python: \u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e \u043f\u043e \u0441\u043e\u043a\u0435\u0442\u0430\u043c</li> <li>Python Library Reference: socket</li> <li>\u0412\u0438\u0434\u0435\u043e: \u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 \u0440\u0430\u0431\u043e\u0442\u0443 \u0441 \u0441\u043e\u043a\u0435\u0442\u0430\u043c\u0438</li> </ul>"},{"location":"lab-1/task-1/#udp-client-and-server","title":"UDP client and server","text":"<p>You can choose specific IP address and port by changing <code>IP</code> and <code>PORT</code> variables.</p> <p>Firstly run <code>python 1-server.py</code></p> <p>Then run <code>python 1-client.py</code></p> <p>You'll see messages in both consoles: \"Hello, server\" and \"Hello, client\".</p>"},{"location":"lab-1/task-1/#code","title":"Code","text":"<p>1-server.py:</p> <pre><code>import socket\n\nIP = '127.0.0.1'\nPORT = 2020\n\nserver = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nserver.bind((IP, PORT))\ndata, address = server.recvfrom(1024)\nprint(data.decode('utf-8'))\nserver.sendto(b'Hello, client\\n', address)\nserver.close()\n</code></pre> <p>1-client.py:</p> <pre><code>import socket\n\nIP = '127.0.0.1'\nPORT = 2020\n\nclient = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nclient.sendto(b'Hello, server\\n', (IP, PORT))\ndata, address = client.recvfrom(1024)\nprint(data.decode('utf-8'))\nclient.close()\n</code></pre>"},{"location":"lab-1/task-2/","title":"Task 2","text":""},{"location":"lab-1/task-2/#_1","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443.</p> <p>\u0412\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439:</p> <ol> <li>\u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430.</li> <li>\u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f.</li> <li>\u041f\u043e\u0438\u0441\u043a \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0442\u0440\u0430\u043f\u0435\u0446\u0438\u0438.</li> <li>\u041f\u043e\u0438\u0441\u043a \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u0430.</li> </ol> <p>\u041f\u043e\u0440\u044f\u0434\u043e\u043a \u0432\u044b\u0431\u043e\u0440\u0430 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430: \u0412\u044b\u0431\u0438\u0440\u0430\u0435\u0442\u0441\u044f \u043f\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u043e\u043c\u0443 \u043d\u043e\u043c\u0435\u0440\u0443 \u0432 \u0436\u0443\u0440\u043d\u0430\u043b\u0435 (\u043f\u044f\u0442\u044b\u0439 \u0441\u0442\u0443\u0434\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 1 \u0438 \u0442.\u0434.).</p> <p>\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f:</p> <ul> <li>\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 <code>socket</code>.</li> <li>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP.</li> </ul>"},{"location":"lab-1/task-2/#parallelogram-area-calculator","title":"Parallelogram area calculator","text":"<p>You can choose specific IP address and port by changing <code>IP</code> and <code>PORT</code> variables.</p> <p>Firstly run <code>python 2-server.py</code></p> <p>Then run <code>python 2-client.py</code></p> <p>Enter numbers into client's console: a, h or a, b, alpha (without commas, space as separator, alpha in degrees).</p> <p>You'll see the result.</p> <pre><code>Parallelogram Area Calculator\nEnter a, h or a, b, alpha: 10 20\nResult: 200.0\n\nParallelogram Area Calculator\nEnter a, h or a, b, alpha: 10 20 30\nResult: 99.99999999999999\n</code></pre>"},{"location":"lab-1/task-2/#code","title":"Code","text":"<p>2-server.py:</p> <pre><code>import socket\nimport math\n\nIP = '127.0.0.1'\nPORT = 2020\n\ndef calc(x):\n  try:\n    x = list(map(float, x.split()))\n  except:\n    return 'Wrong format'\n  if len(x) == 2:\n    a, h = x\n    return str(a * h)\n  elif len(x) == 3:\n    a, b, alpha = x\n    return str(a * b * math.sin(math.radians(alpha)))\n  else:\n    return 'Wrong format'\n\nserver = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver.bind((IP, PORT))\nserver.listen()\nclient, address = server.accept()\ndata = client.recv(1024).decode('utf-8')\nclient.send(calc(data).encode('utf-8'))\nclient.shutdown(socket.SHUT_WR)\nserver.close()\n</code></pre> <p>2-client.py:</p> <pre><code>import socket\n\nIP = '127.0.0.1'\nPORT = 2020\n\nprint('Parallelogram Area Calculator')\nx = input('Enter a, h or a, b, alpha: ')\n\nclient = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nclient.connect((IP, PORT))\nclient.send(x.encode('utf-8'))\ndata = client.recv(1024)\nprint('Result:', data.decode())\nclient.close()\n</code></pre>"},{"location":"lab-1/task-3/","title":"Task 3","text":""},{"location":"lab-1/task-3/#_1","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u0438 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 HTTP-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 <code>index.html</code>.</p> <p>\u041f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u0441\u0441\u044b\u043b\u043a\u0438:</p> <ul> <li>ZetCode: \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0441\u043e\u043a\u0435\u0442\u0430\u043c\u0438</li> </ul> <p>\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f:</p> <ul> <li>\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 <code>socket</code>.</li> </ul>"},{"location":"lab-1/task-3/#http-server","title":"HTTP server","text":"<p>You can choose specific IP address and port by changing <code>IP</code> and <code>PORT</code> variables.</p> <p>In order to connect to the server enter <code>127.0.0.1:PORT</code> into your browser's URL field.</p> <p>You'll see <code>index.html</code> web page.</p>"},{"location":"lab-1/task-3/#code","title":"Code","text":"<p>3.py:</p> <pre><code>import socket\n\nIP = '127.0.0.1'\nPORT = 2020\n\nserver = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver.bind((IP, PORT))\nserver.listen()\nheaders = b'HTTP/1.1 200 OK\\r\\nContent-Type: text/html; charset=utf-8\\r\\n\\r\\n'\ntry:\n  while True:\n    client, address = server.accept()\n    with open('index.html', 'rb') as f:\n      content = f.read()\n    client.send(headers + content)\n    client.shutdown(socket.SHUT_WR)\nexcept KeyboardInterrupt:\n  server.close()\n</code></pre>"},{"location":"lab-1/task-4/","title":"Task 4","text":""},{"location":"lab-1/task-4/#_1","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0414\u043b\u044f \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0431\u0430\u043b\u043b\u043e\u0432 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442.</p> <p>\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f:</p> <ul> <li>\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 <code>socket</code>.</li> <li>\u0414\u043b\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0442\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 <code>threading</code>.</li> </ul> <p>\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f:</p> <ul> <li>\u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b TCP: 100% \u0431\u0430\u043b\u043b\u043e\u0432.</li> <li>\u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b UDP: 80% \u0431\u0430\u043b\u043b\u043e\u0432.</li> <li>\u0414\u043b\u044f UDP \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 <code>threading</code> \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043d\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0435.</li> <li>\u0414\u043b\u044f TCP \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043e\u0442 \u0432\u0441\u0435\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0432 \u043f\u043e\u0442\u043e\u043a\u0430\u0445. \u041d\u0435 \u0437\u0430\u0431\u0443\u0434\u044c\u0442\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u0447\u0442\u043e\u0431\u044b \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0438\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f.</li> </ul> <p>\u041f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u0441\u0441\u044b\u043b\u043a\u0438:</p> <ul> <li>\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f Python: threading</li> <li>WebDevBlog: \u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0432 \u043f\u043e\u0442\u043e\u043a\u0438 Python</li> </ul>"},{"location":"lab-1/task-4/#tcp-multiplayer-chat","title":"TCP multiplayer chat","text":"<p>You can choose specific IP address and port by changing <code>IP</code> and <code>PORT</code> variables.</p> <p>Firstly run <code>python 4-server.py</code></p> <p>Then run multiple <code>python 4-client.py</code></p> <p>Enter name on client. Then you will be able to send and receive messages.</p> <p>Server:</p> <pre><code>Chat started...\n('127.0.0.1', 52188) connected\nName is Andrei\n('127.0.0.1', 52195) connected\nName is Alice\n('127.0.0.1', 52499) connected\nName is Dima\n</code></pre> <p>Client 1:</p> <pre><code>Enter name: Andrei\nAndrei joined the chat.\nAlice joined the chat.\nDima joined the chat.\nHello!\nAndrei: Hello!\nAlice: Hi!\nDima: Hello World!\n</code></pre> <p>Client 2:</p> <pre><code>Enter name: Alice \nAlice joined the chat.\nDima joined the chat.\nAndrei: Hello!\nHi!   \nAlice: Hi!\nDima: Hello World!\n</code></pre> <p>Client 3:</p> <pre><code>Enter name: Dima \nDima joined the chat.\nAndrei: Hello!\nAlice: Hi!\nHello World!\nDima: Hello World!\n</code></pre>"},{"location":"lab-1/task-4/#code","title":"Code","text":"<p>4-server.py:</p> <pre><code>import socket\nimport threading\n\nIP = '127.0.0.1'\nPORT = 2020\n\nserver = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver.bind((IP, PORT))\nserver.listen()\n\nclients = []\nnames = []\n\ndef broadcast(message):\n  for i in clients:\n    i.send(message)\n\ndef handle(client):\n  while True:\n    try:\n      index = clients.index(client)\n      name = names[index]\n      message = client.recv(1024)\n      if message:\n        message = f'{name}: '.encode('utf-8') + message\n        broadcast(message)\n    except:\n      clients.remove(client)\n      client.close()\n      broadcast(f'{name} left the chat.'.encode('utf-8'))\n      names.remove(name)\n      break\n\ndef connect():\n  while True:\n    client, address = server.accept()\n    print(address, 'connected')\n    client.send('NAME'.encode('utf-8'))\n    name = client.recv(1024).decode('utf-8')\n    names.append(name)\n    clients.append(client)\n    print('Name is', name)\n    broadcast(f'{name} joined the chat.'.encode('utf-8'))\n    threading.Thread(target=handle, args=(client,)).start()\n\nprint('Chat started...')\nconnect()\n</code></pre> <p>4-client.py:</p> <pre><code>import socket\nimport threading\n\nIP = '127.0.0.1'\nPORT = 2020\n\nname = input('Enter name: ')\n\nclient = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nclient.connect((IP, PORT))\n\ndef get():\n  while True:\n    try:\n      message = client.recv(1024).decode('utf-8')\n      if message == 'NAME':\n        client.send(name.encode('utf-8'))\n      else:\n        print(message)\n    except Exception as e:\n      print(e)\n      client.close()\n      break\n\ndef send():\n  while True:\n    message = input()\n    client.send(message.encode('utf-8'))\n\nthreading.Thread(target=get).start()\nthreading.Thread(target=send).start()\n</code></pre>"},{"location":"lab-1/task-5/","title":"Task 5","text":""},{"location":"lab-1/task-5/#_1","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435","text":"<p>\u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 <code>socket</code> \u0432 Python.</p> <p>\u0417\u0430\u0434\u0430\u043d\u0438\u0435:</p> <ul> <li>\u0421\u0435\u0440\u0432\u0435\u0440 \u0434\u043e\u043b\u0436\u0435\u043d:<ol> <li>\u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435.</li> <li>\u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c \u0432 \u0432\u0438\u0434\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b.</li> </ol> </li> </ul> <p>\u041f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u0441\u0441\u044b\u043b\u043a\u0438:</p> <ul> <li>\u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440\u0430</li> <li>\u041c\u0430\u043d\u0443\u0430\u043b \u043f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044e \u0441\u0435\u0440\u0432\u0435\u0440\u0430</li> </ul>"},{"location":"lab-1/task-5/#http-server-with-get-and-post-methods","title":"HTTP server with GET and POST methods","text":"<p>You can choose specific IP address, port and marks path by changing <code>ip</code>, <code>port</code> and <code>marks_path</code> variables.</p> <p>In order to connect to the server enter <code>127.0.0.1:PORT</code> into your browser's URL field.</p> <p>You'll see web page with table of subjects and marks, and form for adding new subject and mark or changing existing. To edit the table enter Subject and Mark, then click Submit.</p> <p>Subjects and marks are stored in <code>marks.json</code>.</p> <p>Used classless CSS to make website prettier.</p> <p>You can choose CSS by uncommenting specific line.</p> <pre><code># content += '&lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@exampledev/new.css@1/new.min.css\"&gt;'\n# content += '&lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/water.css@2/out/water.min.css\"&gt;'\n# content += '&lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/water.css@2/out/dark.min.css\"&gt;'\ncontent += '&lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/water.css@2/out/light.min.css\"&gt;'\n</code></pre> <p>I recommend new.css or water.css</p> <p>More classless CSS</p>"},{"location":"lab-1/task-5/#code","title":"Code","text":"<p>5-oop.py:</p> <pre><code>import socket\nimport json\n\nfrom urllib.parse import parse_qs\n\nclass Server:\n  server_socket = None\n\n  def __init__(self, ip: str, port: int, marks_path: str):\n    self.ip = ip\n    self.port = port\n    self.marks_path = marks_path\n\n  def __del__(self):\n    self.stop()\n\n  def run(self):\n    self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    self.server_socket.bind((self.ip, self.port))\n    self.server_socket.listen()\n    while True:\n      self.handle_request()\n\n  def stop(self):\n    if self.server_socket is not None:\n      self.server_socket.close()\n\n  def handle_request(self):\n    client, address = self.server_socket.accept()\n    method, path, http, query = self.parse_request(client.recv(1024).decode('utf-8'))\n    if method == 'POST':\n      self.set_mark(query['subject'][0], int(query['mark'][0]))\n    self.send_response(client)\n    client.shutdown(socket.SHUT_WR)\n\n  def parse_request(self, data):\n    data = data.split('\\n')\n    method, path, http = data[0].split()\n    query = None\n    if method == 'POST':\n      query = parse_qs(data[-1])\n    return method, path, http, query\n\n  def set_mark(self, subject: str, mark: int):\n    with open(self.marks_path) as f:\n      m = json.load(f)\n    with open(self.marks_path, 'w') as f:\n      m[subject] = mark\n      json.dump(m, f)\n\n  def send_response(self, client):\n    headers = 'HTTP/1.1 200 OK\\r\\nContent-Type: text/html; charset=utf-8\\r\\n\\r\\n'\n    client.send(headers.encode('utf-8') + self.generate_html().encode('utf-8'))\n\n  def generate_html(self):\n    with open(self.marks_path) as f:\n      m = json.load(f)\n      content = '''&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt;\n      &lt;meta charset=\"UTF-8\"&gt;&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n      &lt;title&gt;Subjects &amp; Marks&lt;/title&gt;'''\n      # content += '&lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@exampledev/new.css@1/new.min.css\"&gt;'\n      # content += '&lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/water.css@2/out/water.min.css\"&gt;'\n      # content += '&lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/water.css@2/out/dark.min.css\"&gt;'\n      content += '&lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/water.css@2/out/light.min.css\"&gt;'\n      content += '&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Subjects &amp; Marks&lt;/h1&gt;&lt;table&gt;&lt;tr&gt;&lt;th&gt;Subject&lt;/th&gt;&lt;th&gt;Mark&lt;/th&gt;&lt;/tr&gt;'\n      content += '\\n'.join([f'&lt;tr&gt;&lt;td&gt;{i[0]}&lt;/td&gt;&lt;td&gt;{i[1]}&lt;/td&gt;&lt;/tr&gt;' for i in m.items()])\n      content += '''&lt;/table&gt;&lt;br&gt;&lt;form action=\"/\" method=\"POST\"&gt;\n      &lt;label for=\"subject\"&gt;Subject:&lt;/label&gt;&lt;br&gt;\n      &lt;input type=\"text\" name=\"subject\" id=\"subject\"&gt;&lt;br&gt;\n      &lt;label for=\"mark\"&gt;Mark:&lt;/label&gt;&lt;br&gt;\n      &lt;input type=\"number\" name=\"mark\" id=\"mark\" min=\"0\"&gt;&lt;br&gt;\n      &lt;input type=\"submit\"&gt;\n    &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;'''\n      return content\n\nif __name__ == '__main__':\n  ip = '127.0.0.1'\n  port = 2020\n  marks_path = 'marks.json'\n  server = Server(ip, port, marks_path)\n  try:\n    server.run()\n  except KeyboardInterrupt:\n    ...\n</code></pre>"}]}